{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./styles/App.css';import ChatHeader from'./components/ChatHeader';import MessageList from'./components/MessageList';import ChatInput from'./components/ChatInput';import{fetchBotResponse}from'./services/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[messages,setMessages]=useState([]);const[loading,setLoading]=useState(false);const messagesEndRef=useRef(null);useEffect(()=>{// Add welcome message when component mounts\nif(messages.length===0){setMessages([{id:1,role:'assistant',content:'Hello! How can I assist you with your health concerns today?',timestamp:new Date()}]);}},[]);useEffect(()=>{// Scroll to bottom whenever messages change\nscrollToBottom();},[messages]);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};const handleSendMessage=async message=>{if(!message.trim())return;// Add user message to chat\nconst userMessage={id:messages.length+1,role:'user',content:message,timestamp:new Date()};setMessages(prev=>[...prev,userMessage]);setLoading(true);try{// Call API to get bot response\nconst response=await fetchBotResponse(message);// Add bot response to chat\nconst botMessage={id:messages.length+2,role:'assistant',content:response.message,timestamp:new Date()};setMessages(prev=>[...prev,botMessage]);}catch(error){console.error('Error getting response:',error);// Add error message\nconst errorMessage={id:messages.length+2,role:'assistant',content:'Sorry, I encountered an error. Please try again later.',timestamp:new Date(),isError:true};setMessages(prev=>[...prev,errorMessage]);}finally{setLoading(false);}};const handleClearChat=()=>{setMessages([{id:1,role:'assistant',content:'Hello! How can I assist you with your health concerns today?',timestamp:new Date()}]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"HealthCare Assistant\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Your AI-powered medical companion\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Features\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83C\\uDFE5\"}),\" Medical Information\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDC8A\"}),\" Treatment Suggestions\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83E\\uDE7A\"}),\" Health Advice\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\u2753\"}),\" Medical Queries\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Disclaimer\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This AI assistant provides general information only. Always consult a healthcare professional for medical advice.\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"clear-button\",onClick:handleClearChat,children:\"Clear Chat\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(ChatHeader,{}),/*#__PURE__*/_jsx(MessageList,{messages:messages,loading:loading,messagesEndRef:messagesEndRef}),/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage,disabled:loading})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatHeader","MessageList","ChatInput","fetchBotResponse","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","loading","setLoading","messagesEndRef","length","id","role","content","timestamp","Date","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","message","trim","userMessage","prev","response","botMessage","error","console","errorMessage","isError","handleClearChat","className","children","onClick","onSendMessage","disabled"],"sources":["D:/c09/asd/EPICS2/Health_chatbot/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './styles/App.css';\r\nimport ChatHeader from './components/ChatHeader';\r\nimport MessageList from './components/MessageList';\r\nimport ChatInput from './components/ChatInput';\r\nimport { fetchBotResponse } from './services/api';\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Add welcome message when component mounts\r\n    if (messages.length === 0) {\r\n      setMessages([\r\n        { \r\n          id: 1, \r\n          role: 'assistant', \r\n          content: 'Hello! How can I assist you with your health concerns today?',\r\n          timestamp: new Date()\r\n        }\r\n      ]);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom whenever messages change\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const handleSendMessage = async (message) => {\r\n    if (!message.trim()) return;\r\n    \r\n    // Add user message to chat\r\n    const userMessage = {\r\n      id: messages.length + 1,\r\n      role: 'user',\r\n      content: message,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Call API to get bot response\r\n      const response = await fetchBotResponse(message);\r\n      \r\n      // Add bot response to chat\r\n      const botMessage = {\r\n        id: messages.length + 2,\r\n        role: 'assistant',\r\n        content: response.message,\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      setMessages(prev => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error getting response:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: messages.length + 2,\r\n        role: 'assistant',\r\n        content: 'Sorry, I encountered an error. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClearChat = () => {\r\n    setMessages([\r\n      {\r\n        id: 1,\r\n        role: 'assistant',\r\n        content: 'Hello! How can I assist you with your health concerns today?',\r\n        timestamp: new Date()\r\n      }\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"sidebar\">\r\n        <div className=\"sidebar-header\">\r\n          <h2>HealthCare Assistant</h2>\r\n          <p>Your AI-powered medical companion</p>\r\n        </div>\r\n        \r\n        <div className=\"sidebar-section\">\r\n          <h3>Features</h3>\r\n          <ul>\r\n            <li><span className=\"icon\">üè•</span> Medical Information</li>\r\n            <li><span className=\"icon\">üíä</span> Treatment Suggestions</li>\r\n            <li><span className=\"icon\">ü©∫</span> Health Advice</li>\r\n            <li><span className=\"icon\">‚ùì</span> Medical Queries</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className=\"sidebar-section\">\r\n          <h3>Disclaimer</h3>\r\n          <p>This AI assistant provides general information only. Always consult a healthcare professional for medical advice.</p>\r\n        </div>\r\n        \r\n        <button className=\"clear-button\" onClick={handleClearChat}>\r\n          Clear Chat\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"chat-container\">\r\n        <ChatHeader />\r\n        <MessageList messages={messages} loading={loading} messagesEndRef={messagesEndRef} />\r\n        <ChatInput onSendMessage={handleSendMessage} disabled={loading} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}