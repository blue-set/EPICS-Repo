{"ast":null,"code":"const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';export const fetchBotResponse=async message=>{try{const response=await fetch(`${API_URL}/chat`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message})});if(!response.ok){throw new Error('Network response was not ok');}return await response.json();}catch(error){console.error('API error:',error);throw error;}};export const clearChat=async()=>{try{const response=await fetch(`${API_URL}/clear-chat`,{method:'POST'});if(!response.ok){throw new Error('Failed to clear chat');}return await response.json();}catch(error){console.error('Clear chat error:',error);throw error;}};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchBotResponse","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","clearChat"],"sources":["D:/c09/asd/EPICS2/Health_chatbot/frontend/src/services/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const fetchBotResponse = async (message) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/chat`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ message }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const clearChat = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/clear-chat`, {\r\n      method: 'POST',\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to clear chat');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Clear chat error:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA,KAAM,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CAE5E,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,OAAO,EAAK,CACjD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGP,OAAO,OAAO,CAAE,CAC9CQ,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,OAAQ,CAAC,CAClC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,MAAO,MAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,SAAS,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACF,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGP,OAAO,aAAa,CAAE,CACpDQ,MAAM,CAAE,MACV,CAAC,CAAC,CAEF,GAAI,CAACF,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA,MAAO,MAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CACzC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}